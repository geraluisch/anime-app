[{"C:\\Proyectos React\\anime-app-project\\src\\index.js":"1","C:\\Proyectos React\\anime-app-project\\src\\App.js":"2","C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\Header.js":"3","C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\Footer.js":"4","C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\NavigationMenu.js":"5","C:\\Proyectos React\\anime-app-project\\src\\components\\Home\\index.js":"6","C:\\Proyectos React\\anime-app-project\\src\\contexts\\HomeContext.js":"7","C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\Message.js":"8","C:\\Proyectos React\\anime-app-project\\src\\constants\\index.js":"9","C:\\Proyectos React\\anime-app-project\\src\\components\\Home\\TopAnime.js":"10","C:\\Proyectos React\\anime-app-project\\src\\components\\Home\\Anime.js":"11","C:\\Proyectos React\\anime-app-project\\src\\components\\Anime\\index.js":"12","C:\\Proyectos React\\anime-app-project\\src\\components\\Anime\\AnimeInfo.js":"13","C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\ProgressBar.js":"14","C:\\Proyectos React\\anime-app-project\\src\\components\\NotFound\\index.js":"15","C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\SearchMessage.js":"16","C:\\Proyectos React\\anime-app-project\\src\\contexts\\AnimeContext.js":"17","C:\\Proyectos React\\anime-app-project\\src\\contexts\\SearchContext.js":"18","C:\\Proyectos React\\anime-app-project\\src\\components\\Search\\index.js":"19","C:\\Proyectos React\\anime-app-project\\src\\components\\Search\\AnimeList.js":"20","C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\LikeBtn.js":"21","C:\\Proyectos React\\anime-app-project\\src\\components\\MyList\\index.js":"22","C:\\Proyectos React\\anime-app-project\\src\\components\\MyList\\MyAnimeList.js":"23"},{"size":136,"mtime":1610100827496,"results":"24","hashOfConfig":"25"},{"size":1573,"mtime":1612173045744,"results":"26","hashOfConfig":"25"},{"size":368,"mtime":1610532119484,"results":"27","hashOfConfig":"25"},{"size":256,"mtime":1610361911869,"results":"28","hashOfConfig":"25"},{"size":3713,"mtime":1612173455942,"results":"29","hashOfConfig":"25"},{"size":765,"mtime":1612174217652,"results":"30","hashOfConfig":"25"},{"size":967,"mtime":1611310843909,"results":"31","hashOfConfig":"25"},{"size":175,"mtime":1610618859908,"results":"32","hashOfConfig":"25"},{"size":2761,"mtime":1612175338211,"results":"33","hashOfConfig":"25"},{"size":1638,"mtime":1612175368922,"results":"34","hashOfConfig":"25"},{"size":826,"mtime":1612218917866,"results":"35","hashOfConfig":"25"},{"size":767,"mtime":1611226277258,"results":"36","hashOfConfig":"25"},{"size":684,"mtime":1611617704861,"results":"37","hashOfConfig":"25"},{"size":294,"mtime":1610963359316,"results":"38","hashOfConfig":"25"},{"size":410,"mtime":1610965187853,"results":"39","hashOfConfig":"25"},{"size":709,"mtime":1611050596105,"results":"40","hashOfConfig":"25"},{"size":1161,"mtime":1611617527300,"results":"41","hashOfConfig":"25"},{"size":2884,"mtime":1612218917866,"results":"42","hashOfConfig":"25"},{"size":5298,"mtime":1612218917867,"results":"43","hashOfConfig":"25"},{"size":1711,"mtime":1612174938064,"results":"44","hashOfConfig":"25"},{"size":1951,"mtime":1612218917867,"results":"45","hashOfConfig":"25"},{"size":534,"mtime":1612174331319,"results":"46","hashOfConfig":"25"},{"size":1166,"mtime":1612173256701,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"epivbm",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},"C:\\Proyectos React\\anime-app-project\\src\\index.js",[],["104","105"],"C:\\Proyectos React\\anime-app-project\\src\\App.js",[],"C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\Header.js",[],"C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\Footer.js",[],"C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\NavigationMenu.js",["106"],"import React, { Fragment, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport photo from './../../assets/img/photo.jpg';\r\nimport linkedin from './../../assets/img/in.png';\r\nimport gmail from './../../assets/img/gmail.png';\r\nimport github from './../../assets/img/github.svg';\r\nimport './../../assets/css/styles.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',       \r\n    },   \r\n}));\r\n\r\nconst NavigationMenu = () => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleOpen = (e) => {\r\n        e.preventDefault();\r\n        setOpen(true);      \r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    return(\r\n        <Fragment>\r\n            <nav class=\"nav-header\">\r\n                <ul>\r\n                    <li><a href='/'>HOME</a></li>\r\n                    <li><a href='/search/anime'>SEARCH</a></li>\r\n                    <li><a href='/mylist'>MY LIST</a></li>\r\n                    <li><a href=\"#\" onClick={ handleOpen }>ABOUT</a></li>\r\n                </ul>\r\n            </nav>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>               \r\n                \r\n                    <div className=\"about-paper\"> \r\n                        <h2 id=\"transition-modal-title\">Final JavaScript Master Project</h2>                       \r\n                        <p id=\"transition-modal-title\">Created by Luis Chourio</p>\r\n                        <div className=\"avatar-photo\" >\r\n                            <Avatar alt=\"Luis Chourio\" src={ photo } />\r\n                            <div className=\"div-avatar-contact\" >\r\n                                <a href=\"mailto: geraluisch@gmial.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    <Avatar alt=\"Gmail\" src={ gmail } className=\"avatar-contact\"/>\r\n                                </a>\r\n                                <a href=\"https://www.linkedin.com/in/luis-geraldo-chourio-gudi%C3%B1o-b38b1369/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    <Avatar alt=\"Linkedin\" src={ linkedin } className=\"avatar-contact\"/>\r\n                                </a>\r\n                                <a href=\"https://github.com/geraluisch\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    <Avatar alt=\"Github\" src={ github } className=\"avatar-contact\"/>\r\n                                </a>\r\n                            </div>\r\n                            <p id=\"transition-modal-title\">This project consume the next api: </p> \r\n                            <a class=\"link-modal\" href=\"https://kitsu.docs.apiary.io/#\" target=\"_blank\" rel=\"noopener noreferrer\">https://kitsu.docs.apiary.io/#</a>\r\n                        </div>  \r\n                    </div>                   \r\n                </Fade>\r\n            </Modal>\r\n        </Fragment>\r\n    );   \r\n}\r\n\r\nNavigationMenu.displayName = 'NavigationMenu';\r\n\r\nexport default NavigationMenu;","C:\\Proyectos React\\anime-app-project\\src\\components\\Home\\index.js",[],"C:\\Proyectos React\\anime-app-project\\src\\contexts\\HomeContext.js",[],"C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\Message.js",[],"C:\\Proyectos React\\anime-app-project\\src\\constants\\index.js",[],"C:\\Proyectos React\\anime-app-project\\src\\components\\Home\\TopAnime.js",[],"C:\\Proyectos React\\anime-app-project\\src\\components\\Home\\Anime.js",[],"C:\\Proyectos React\\anime-app-project\\src\\components\\Anime\\index.js",[],"C:\\Proyectos React\\anime-app-project\\src\\components\\Anime\\AnimeInfo.js",["107","108","109","110"],"import React from 'react';\r\nimport header from './../../assets/img/generic.jpg'\r\nimport './../../assets/css/styles.css';\r\n\r\nconst AnimeInfo = ({ anime }) => {\r\n    \r\n    const { \r\n        id,\r\n        type,\r\n        attributes,\r\n        relationships,\r\n    } = anime;    \r\n\r\n    let cover = attributes.coverImage === null ? header : attributes.coverImage.tiny;\r\n   \r\n    return (\r\n        <div>\r\n            <img src={ cover } />\r\n            <p>{ attributes.titles.en_jp }  </p>\r\n            <p>{ attributes.createdAt }</p>\r\n            <div>{ attributes.synopsis }</div>\r\n            \r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nAnimeInfo.displayName = 'AnimeInfo';\r\n\r\nexport default AnimeInfo;","C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\ProgressBar.js",[],"C:\\Proyectos React\\anime-app-project\\src\\components\\NotFound\\index.js",["111"],"import React, { Fragment, Component } from 'react';\r\nimport SearchMessage from './../Common/SearchMessage';\r\n\r\nclass NotFound extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <SearchMessage text=\"404: URL not Found\" type=\"back\" />        \r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotFound;\r\n","C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\SearchMessage.js",[],"C:\\Proyectos React\\anime-app-project\\src\\contexts\\AnimeContext.js",["112"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport { apiFindAinme } from '../constants';\r\n\r\nexport const AnimeContext = createContext();\r\n\r\nconst AnimeContextProvider = ({ children }) => {\r\n    const animeId = window.location.pathname.split('/')[2];\r\n    const [doneFetch, setDoneFetch] = useState(false);\r\n    const [anime, setAnime] = useState([]);\r\n\r\n    useEffect(() => getAnime(animeId),[]);\r\n    \r\n\r\n    const getAnime = animeId => {\r\n        fetch(apiFindAinme(animeId),\r\n              { method : 'GET' },\r\n        ).then(res => res.json()\r\n        ).then(result => {\r\n            setDoneFetch(true);\r\n            if(result.errors === undefined) {              \r\n                const { data } = result;                \r\n                setAnime(data);\r\n            } else {             \r\n                setAnime(result);\r\n            }        \r\n        }).catch(err =>{\r\n            console.log('Error: ', err);\r\n        });\r\n\r\n    }\r\n\r\n    return (\r\n        <AnimeContext.Provider value={{ doneFetch, anime }}>\r\n            { children }    \r\n        </AnimeContext.Provider>\r\n    );\r\n\r\n}\r\n\r\nexport default AnimeContextProvider;","C:\\Proyectos React\\anime-app-project\\src\\contexts\\SearchContext.js",["113"],"import React, { useEffect, useState, createContext } from 'react';\r\nimport { apiSearchAnime, apiCategories, searchType, getFromLocalStorage } from '../constants';\r\n\r\nexport const SearchContext = createContext();\r\n\r\nconst SearchContextProvider = ({ children }) => {\r\n    const [doneFetchAnime, setDoneFetchAnime] = useState(false);\r\n    const [doneFetchCategories, setDoneFetchCategories] = useState(false);\r\n    const [animeList, setAnimeList] = useState([]);\r\n    const [categoriesList, setCategoriesList] = useState([]);\r\n    const [searchT, setSearchT] = useState([]);\r\n    const [searchValue, setSearchValue] = useState(''); \r\n    const [searchIni, setSearchIni] = useState(false); \r\n    const [favorites, setFavorites] = useState(getFromLocalStorage())\r\n\r\n    useEffect(() => findCategories(), []);\r\n\r\n    const findCategories = () => {\r\n        fetch(apiCategories(),\r\n             { method : 'GET' },\r\n        ).then(res => res.json()\r\n        ).then(result => {\r\n            const { data } = result;\r\n            setDoneFetchCategories(true);\r\n            setCategoriesList(data);\r\n        }).catch(err => {\r\n            console.log('Error: ', err);\r\n        })\r\n    }\r\n\r\n    const findAnime = (searchBy, searchText) => {\r\n        fetch(apiSearchAnime(searchBy, searchText),\r\n            { method : 'GET'},\r\n        ).then(res => res.json()            \r\n        ).then(result => {\r\n            const { data } = result;\r\n            setDoneFetchAnime(true);\r\n            setAnimeList(data);           \r\n            setFavorites(getFromLocalStorage());\r\n        }).catch(err => {\r\n            console.log('Error: ', err);\r\n        });\r\n    }\r\n\r\n    const validateSearchAnime = (e, \r\n                                searchBy ,  \r\n                                searchCat,  \r\n                                searchText = document.querySelector('#text_search') != null ? document.querySelector('#text_search').value.toLowerCase() : '') => {  \r\n                              \r\n        if(searchType !== searchBy && searchBy.length > 0 ) {\r\n            setSearchT(searchBy);            \r\n            setDoneFetchAnime(false);\r\n            if(searchBy === searchType[1] && searchValue !== searchText) {             \r\n                setSearchValue(searchText);\r\n                findAnime('text', searchText);  \r\n                setSearchIni(true);              \r\n            } else if(searchValue !== searchCat) {             \r\n                setSearchValue(searchCat);\r\n                findAnime(searchBy, searchCat);\r\n                setSearchIni(true);  \r\n            } \r\n        }\r\n\r\n    } \r\n\r\n    return (\r\n\r\n        <SearchContext.Provider value={{ validateSearchAnime, doneFetchAnime, doneFetchCategories, animeList, categoriesList, searchIni, favorites  }}>\r\n            { children }\r\n        </SearchContext.Provider> \r\n\r\n    )\r\n\r\n}\r\n\r\nexport default SearchContextProvider;","C:\\Proyectos React\\anime-app-project\\src\\components\\Search\\index.js",["114"],"import React, { Fragment, useContext, useState } from 'react';\r\nimport { SearchContext } from './../../contexts/SearchContext';\r\nimport { searchType } from './../../constants';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { getFromLocalStorage } from './../../constants';\r\nimport AnimeList from './AnimeList';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Message from '../Common/Message';\r\nimport ProgressBar from '../Common/ProgressBar';\r\nimport './../../assets/css/styles.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst Search = () => {\r\n    const { validateSearchAnime, doneFetchAnime, doneFetchCategories, animeList, categoriesList, searchIni, favorites } = useContext( SearchContext );\r\n\r\n    const [categoriesSearch, setCategoriesSearch] = useState([]);\r\n    const [typeSearch, setSearchType] = useState([]);             \r\n    const classes = useStyles();   \r\n\r\n    const handleChangeSearchBy = (event) => {      \r\n        setSearchType(event.target.value);\r\n    };\r\n\r\n    const handleChange = (event) => {        \r\n        setCategoriesSearch(event.target.value);\r\n    };\r\n    \r\n    return (\r\n        <Fragment>\r\n            <main>\r\n                <div>\r\n                    <FormControl className={ classes.formControl }>\r\n                        <InputLabel id=\"type-label\">Search by</InputLabel>\r\n                        <Select\r\n                            labelId=\"type-label\"\r\n                            id=\"q_type\"                            \r\n                            value={ typeSearch }\r\n                            onChange={ handleChangeSearchBy }\r\n                        >\r\n                            { searchType.map((row,idx) => (                                \r\n                                <MenuItem key={ idx } value={ row }>{ row }</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n\r\n\r\n                    {\r\n                       typeSearch === 'categories' ?\r\n                            (\r\n                                doneFetchCategories ?\r\n                                    (\r\n                                        categoriesList.length > 0 ?\r\n                                            (\r\n                                                <FormControl className={classes.formControl}>\r\n                                                    <InputLabel id=\"categories-label\">Cetegories</InputLabel>\r\n                                                    <Select\r\n                                                        labelId=\"categories-label\"\r\n                                                        id=\"q_catg\"\r\n                                                        value={ categoriesSearch }\r\n                                                        onChange={ handleChange }\r\n                                                    >\r\n                                                        { categoriesList.map((row,idx) => (                                \r\n                                                            <MenuItem key={ idx } value={ row.attributes.slug }>{ row.attributes.title }</MenuItem>\r\n                                                        ))}\r\n                                                    </Select>\r\n                                                </FormControl>\r\n\r\n                                            )\r\n                                        :\r\n                                            <Message text='Categories not found'/>\r\n                                    )\r\n                                                                        \r\n                                :\r\n                                    <ProgressBar />\r\n                            )\r\n                        :\r\n                            (\r\n                                <input placeholder=\"Insert an anime\" type=\"text\" id=\"text_search\" class=\"text_search\"></input>\r\n                            )\r\n                                                        \r\n                    }\r\n\r\n                    <Button variant=\"contained\" onClick={ e => validateSearchAnime(e,typeSearch,categoriesSearch) }>Search</Button>  \r\n                </div>\r\n                <div>\r\n                    {\r\n                        searchIni ?\r\n                        (\r\n                            doneFetchAnime ?\r\n                            ( animeList.length > 0 ? <AnimeList animes={ animeList } favorites={ favorites }/> : <Message text='Anime not found' /> )  \r\n                            :\r\n                                <ProgressBar />\r\n                        )                        \r\n                        :\r\n                        ( <div class=\"\"> Search Animes </div>  )\r\n\r\n\r\n                    }\r\n                </div>\r\n            </main>            \r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nSearch.displayName = 'Search';\r\n\r\nexport default Search;","C:\\Proyectos React\\anime-app-project\\src\\components\\Search\\AnimeList.js",["115","116","117","118"],"import React from 'react';\r\nimport naImg from './../../assets/img/na.jpg'\r\nimport LikeBtn from './../Common/LikeBtn';\r\nimport { findAnime } from './../../constants';\r\nimport './../../assets/css/styles.css';\r\n\r\n\r\nconst AnimeList = ({ animes, favorites }) => (\r\n    <div>\r\n        <ul>\r\n            {   animes.map((anime, idx, arr) => {\r\n\r\n                    const {\r\n                        id,\r\n                        type,\r\n                        links :{\r\n                            self\r\n                        },\r\n                        attributes : {\r\n                            synopsis,\r\n                            titles : {\r\n                                en_us\r\n                            },\r\n                            posterImage                          \r\n                        }\r\n                    } = anime;\r\n\r\n                    let link = `/anime/${ id }`;                   \r\n\r\n                    let image = posterImage === null ? naImg : posterImage.tiny;\r\n\r\n                    const found = findAnime(id, en_us, posterImage.tiny, favorites);\r\n\r\n                    return (\r\n                        <li>\r\n                            <span> id : { id }</span>\r\n                            <img src={ image }/>\r\n                            <p>{ en_us }</p>\r\n                            <a href={ link } class='search-link' ><p>See More</p></a> \r\n                            <LikeBtn id={ id } title={ en_us } image={ image } link={ link } favorite={ found }/> \r\n\r\n                        </li>\r\n                    );\r\n                \r\n                })\r\n            }\r\n        </ul>\r\n    </div>\r\n\r\n);\r\n\r\n\r\nAnimeList.displayName = 'AnimeList';\r\n\r\nexport default AnimeList;","C:\\Proyectos React\\anime-app-project\\src\\components\\Common\\LikeBtn.js",["119"],"import React, { useState, useEffect } from 'react';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport { saveToLocalStorage, deleteFromLocalStorage } from './../../constants'\r\nimport './../../assets/css/styles.css';\r\n\r\n// class LikeBtn extends Component {  \r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.state = {\r\n//             liked: this.props.favorite\r\n//         };\r\n//       }\r\n\r\n//     state = {\r\n//         liked: false\r\n//     }    \r\n\r\n    \r\n\r\n    // toggle = () => {\r\n    //     this.setState({\r\n    //         liked: !this.state.liked\r\n    //     })\r\n\r\n    //     const likeAnime = saveToLocalStorage;\r\n    //     const dislikeAnime = saveToLocalStorage;\r\n\r\n      \r\n    //     if( this.state.liked )\r\n    //         likeAnime(this.props.id, this.props.title, this.props.image);\r\n    //     // else \r\n    //     //     dislikeAnime(this.props.id, this.props.title, this.props.image);\r\n    // }\r\n\r\n   \r\n\r\n//     render(){\r\n//         return(\r\n            // <button className='likeBtn' onClick={ this.toggle }>\r\n            //    {\r\n            //        this.state.liked ? <FavoriteIcon/> : <FavoriteBorderIcon/>\r\n            //    }\r\n            // </button>\r\n//         )\r\n//     }\r\n\r\n// }\r\n\r\nconst LikeBtn = ({ id, title, image, favorite }) => {\r\n\r\n    const [liked, setLiked] = useState(favorite);\r\n\r\n    //useEffect(() => toggle(),liked);\r\n\r\n    const toggle = () => {     \r\n       \r\n        // const likeAnime = saveToLocalStorage;\r\n        // const dislikeAnime = saveToLocalStorage; \r\n        \r\n        if( !liked )\r\n            saveToLocalStorage(id, title, image);\r\n        else \r\n            deleteFromLocalStorage(id, title, image);\r\n\r\n        console.log(!liked);   \r\n\r\n        setLiked(!liked)  \r\n    }\r\n    \r\n    return (\r\n        <button className='likeBtn' onClick={ toggle }>\r\n        {           \r\n           liked ? <FavoriteIcon/> : <FavoriteBorderIcon/>\r\n        }\r\n        </button>\r\n    );\r\n\r\n\r\n\r\n}\r\n\r\nLikeBtn.displayName = 'LikeBtn';\r\n\r\nexport default LikeBtn;","C:\\Proyectos React\\anime-app-project\\src\\components\\MyList\\index.js",[],"C:\\Proyectos React\\anime-app-project\\src\\components\\MyList\\MyAnimeList.js",["120"],"import React from 'react';\r\n// import naImg from './../../assets/img/na.jpg'\r\nimport LikeBtn from './../Common/LikeBtn';\r\nimport './../../assets/css/styles.css';\r\n\r\n\r\nconst MyAnimeList = ({ animes }) => (\r\n    <div>\r\n        <ul>\r\n            {   animes.map((anime, idx, arr) => {\r\n\r\n                    const {\r\n                        id,\r\n                        nombre,\r\n                        imagen\r\n                        \r\n                    } = anime;\r\n\r\n                    let link = `/anime/${ id }`;   \r\n\r\n                    return (\r\n                        <li>\r\n                            <span> id : { id }</span>\r\n                            <img src={ imagen }/>\r\n                            <p>{ nombre }</p>\r\n                            <a href={ link } class='search-link' ><p>See More</p></a> \r\n                            <LikeBtn id={ id } title={ nombre } image={ imagen } link={ link } favorite={ animes }/> \r\n                        </li>\r\n                    );\r\n                \r\n                })\r\n            }\r\n        </ul>\r\n    </div>\r\n\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\nMyAnimeList.displayName = 'MyAnimeList';\r\n\r\nexport default MyAnimeList;",{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":42,"column":25,"nodeType":"127","endLine":42,"endColumn":60},{"ruleId":"128","severity":1,"message":"129","line":8,"column":9,"nodeType":"130","messageId":"131","endLine":8,"endColumn":11},{"ruleId":"128","severity":1,"message":"132","line":9,"column":9,"nodeType":"130","messageId":"131","endLine":9,"endColumn":13},{"ruleId":"128","severity":1,"message":"133","line":11,"column":9,"nodeType":"130","messageId":"131","endLine":11,"endColumn":22},{"ruleId":"134","severity":1,"message":"135","line":18,"column":13,"nodeType":"127","endLine":18,"endColumn":34},{"ruleId":"136","severity":1,"message":"137","line":6,"column":5,"nodeType":"138","messageId":"139","endLine":8,"endColumn":6},{"ruleId":"140","severity":1,"message":"141","line":11,"column":39,"nodeType":"142","endLine":11,"endColumn":41,"suggestions":"143"},{"ruleId":"128","severity":1,"message":"144","line":11,"column":12,"nodeType":"130","messageId":"131","endLine":11,"endColumn":19},{"ruleId":"128","severity":1,"message":"145","line":5,"column":10,"nodeType":"130","messageId":"131","endLine":5,"endColumn":29},{"ruleId":"128","severity":1,"message":"132","line":15,"column":25,"nodeType":"130","messageId":"131","endLine":15,"endColumn":29},{"ruleId":"128","severity":1,"message":"146","line":17,"column":29,"nodeType":"130","messageId":"131","endLine":17,"endColumn":33},{"ruleId":"128","severity":1,"message":"147","line":20,"column":29,"nodeType":"130","messageId":"131","endLine":20,"endColumn":37},{"ruleId":"134","severity":1,"message":"135","line":37,"column":29,"nodeType":"127","endLine":37,"endColumn":49},{"ruleId":"128","severity":1,"message":"148","line":1,"column":27,"nodeType":"130","messageId":"131","endLine":1,"endColumn":36},{"ruleId":"134","severity":1,"message":"135","line":24,"column":29,"nodeType":"127","endLine":24,"endColumn":50},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","'type' is assigned a value but never used.","'relationships' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'animeId'. Either include it or remove the dependency array.","ArrayExpression",["151"],"'searchT' is assigned a value but never used.","'getFromLocalStorage' is defined but never used.","'self' is assigned a value but never used.","'synopsis' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},"Update the dependencies array to be: [animeId]",{"range":"154","text":"155"},[416,418],"[animeId]"]